{
  "name": "calculator",
  "description": "Performs basic arithmetic on two numbers.",
  "type": "tool",
  "backend": "openai",
  "tool_type": "function",
  "bindings": {
    "openai": {
      "parameters": {
        "type": "object",
        "properties": {
          "a": {
            "type": "number",
            "description": "The first operand"
          },
          "b": {
            "type": "number",
            "description": "The second operand"
          },
          "operation": {
            "type": "string",
            "enum": ["add", "subtract", "multiply", "divide"],
            "description": "The operation to perform"
          }
        },
        "required": ["a", "b", "operation"]
      },
      "function": "calculator"
    },
    "mcp": {
      "endpoint": "http://mcp.internal/api/calculate",
      "method": "POST",
      "headers": {
        "Authorization": "Bearer ${MCP_TOKEN}"
      },
      "payload_template": {
        "operand1": "${input.a}",
        "operand2": "${input.b}",
        "operator": "${input.operation}"
      },
      "response_path": "result"
    }
  },
"def calculator(input_data) -> float:\n    if isinstance(input_data, str):\n        # Try to parse simple math string like \"7 * 3\" or \"12.5 / 5\"\n        pattern = r'^\\s*([-+]?\\d*\\.?\\d+)\\s*([\\+\\-\\*/])\\s*([-+]?\\d*\\.?\\d+)\\s*$'\n        match = re.match(pattern, input_data)\n        if not match:\n            raise ValueError(f\"Invalid input format: '{input_data}'\")\n        a = float(match.group(1))\n        operator = match.group(2)\n        b = float(match.group(3))\n\n        operation_map = {\n            '+': 'add',\n            '-': 'subtract',\n            '*': 'multiply',\n            '/': 'divide'\n        }\n        operation = operation_map.get(operator)\n    elif isinstance(input_data, dict):\n        # Structured JSON-style input\n        a = float(input_data[\"a\"])\n        b = float(input_data[\"b\"])\n        operation = input_data[\"operation\"]\n    else:\n        raise TypeError(\"Input must be a string or a dictionary.\")\n\n    # Execute operation\n    if operation == 'add':\n        return a + b\n    elif operation == 'subtract':\n        return a - b\n    elif operation == 'multiply':\n        return a * b\n    elif operation == 'divide':\n        return a / b if b != 0 else float('inf')\n    else:\n        raise ValueError(f\"Unsupported operation: {operation}\")"
}
